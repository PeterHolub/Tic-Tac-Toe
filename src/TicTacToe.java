import java.util.Scanner;

public class TicTacToe {

    //игровое поле
    static char[][] gameField =
            {{'*', '*', '*'},
                    {'*', '*', '*'},
                    {'*', '*', '*'}};

    // Ход первого игрока Х
    static void xMove() {
        Scanner sc1 = new Scanner(System.in);

        System.out.println("Ходит Игрок Х ");
        int x, y;//переменные для присваивания символа Х в массив

        System.out.println("Введите строку (правый индекс) размещения Х (1..3):");
        //Ввод координат (выполняеться операция -1 так как индексация в массиве начинаеться с нуля)
        x = sc1.nextByte() - 1;
        System.out.println("Введите столбец (левый индекс) размещения Х (1..3):");
        y = sc1.nextByte() - 1;
        //Циклическая конструкция для проверки правильности ввода данных
        // проверка индексов (сделана для того что бы на повторное введение неверных данных, не было эксепшена аутофбаунс и игра не заканчивалась)
        while (x < 0 || x > 2 || y < 0 || y > 2) {
            System.out.println("Неверные значения! Указаные индексы больше или меньше возможных значений!");

            System.out.println("Введите строку (правый индекс) размещения Х (1..3):");
            x = sc1.nextByte() - 1;
            System.out.println("Введите столбец (левый индекс) размещения Х (1..3):");
            y = sc1.nextByte() - 1;
        }
        //Циклическая конструкция для проверки правильности ввода данных
        //проверка свободных индексов в массиве (сделана для того что бы игра не продолжалась без хода игрока  если повторно введены неверные данные
        while (gameField[x][y] == '0' || gameField[x][y] == 'X') {
            System.out.println("Неверные значения! Здесь уже был сделан ход");

            System.out.println("Введите строку (правый индекс) размещения Х (1..3):");
            x = sc1.nextByte() - 1;
            System.out.println("Введите столбец (левый индекс) размещения Х (1..3):");
            y = sc1.nextByte() - 1;
        }
        gameField[x][y] = 'X';
    }

    //Ход второго игрока 0
    static void oMove() {
        Scanner sc2 = new Scanner(System.in);

        System.out.println("Ходит Игрок 0 ");
        int x, y;//переменные для присваивания символа 0 в массив

        System.out.println("Введите строку (правый индекс) размещения Х (1..3):");
        //Ввод координат (выполняеться операция -1 так как индексация в массиве начинаеться с нуля)
        x = sc2.nextByte() - 1;
        System.out.println("Введите столбец (левый индекс) размещения Х (1..3):");
        y = sc2.nextByte() - 1;
        //Циклическая конструкция для проверки правильности ввода данных
        // проверка индексов (сделана для того что бы на повторное введение неверных данных, не было эксепшена аутофбаунс и игра не заканчивалась)
        while (x < 0 || x > 2 || y < 0 || y > 2) {
            System.out.println("Неверные значения! Указаные индексы больше или меньше возможных значений!");

            System.out.println("Введите строку (правый индекс) размещения Х (1..3):");
            x = sc2.nextByte() - 1;
            System.out.println("Введите столбец (левый индекс) размещения Х (1..3):");
            y = sc2.nextByte() - 1;
        }
        //Циклическая конструкция для проверки правильности ввода данных
        //проверка свободных индексов в массиве (сделана для того что бы игра не продолжалась без хода игрока  если повторно введены неверные данные
        while (gameField[x][y] == '0' || gameField[x][y] == 'X') {
            System.out.println("Неверные значения! Здесь уже был сделан ход");

            System.out.println("Введите строку (правый индекс) размещения Х (1..3):");
            x = sc2.nextByte() - 1;
            System.out.println("Введите столбец (левый индекс) размещения Х (1..3):");
            y = sc2.nextByte() - 1;
        }
        gameField[x][y] = '0';
    }

    // Вывод игрового поля на экран
    static void printField() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(gameField[i][j]);
            }
            System.out.println();
        }
    }

    // Проверка состояния игры
    static char gameStatus() {
        char winner = ' ';
        // Проверка по горизонтальным комбинациям

        for (int i = 0; i < 3; i++) {
            if (gameField[i][0] == gameField[i][1] && gameField[i][1] == gameField[i][2]
                    && gameField[i][0] != '*') {
                winner = gameField[i][0];// возвращаеться символ находящийся в массиве
                break;
            }
        }

        // Проверка по вертикальным комбинациям


        if (winner == ' ') {
            for (int i = 0; i < 3; i++) {
                if (gameField[0][i] == gameField[1][i] && gameField[1][i] == gameField[2][i]
                        && gameField[0][i] != '*') {
                    winner = gameField[0][i];
                    break;
                }
            }
        }

        // Проверка диагонали 1
        // Х00
        // 0Х0
        // 00Х
        if (winner == ' ') {
            if (gameField[0][0] == gameField[1][1] && gameField[1][1] == gameField[2][2]
                    && gameField[0][0] != '*') {
                winner = gameField[0][0];
            }
        }

        // Проверка диагонали 2
        // 00X
        // 0X0
        // Х00
        if (winner == ' ') {
            if (gameField[0][2] == gameField[1][1] && gameField[1][1] == gameField[2][0]
                    && gameField[0][2] != '*') {
                winner = gameField[0][2];
            }
        }
        // Возвращаеться победитель или пробел если такового нету
        System.out.println(winner);
        return winner;
    }

    //остались ли еще на игровом поле свободные клетки
    static boolean freeField() {
        boolean p = false;// задаеться по умолчанию false что бы вернуть его если вложеные циклы не найдут свободные клетки
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (gameField[i][j] == '*') {
                    p = true;
                    break;
                }
            }

        }
        System.out.println(p);
        return p;

    }

    public static void main(String[] args) {
        System.out.println("Начало игры!");
// условная конструкция (в которой капитан внимательность ифы оставил за цыклом ) где идет проверка состояния игры
        while (gameStatus() == ' ' && freeField()) {
// пока статус возвращает пробел (то что победителя нету) а поле с значением тру (кстати ителедж подсказала что не нужно писать равно тру)
            xMove();// ход игрока первого
            printField();// вывод поля
            // проверка после хода на победителя, ничью
            if (gameStatus() == ' ' && !freeField()) {// второй лол что не нужно писать фрифилд равно фелс, можно просто написать знак восклецания
                System.out.println("Ничья!");
                break;
            }
            if (gameStatus() == 'X') {
                System.out.println("Победа игрока Х!");
                break;

            }
            if (gameStatus() == '0') {
                System.out.println("Победа игрока 0!");
                break;
            }
            // ифы после игрока первого так как он первый ходит и что бы не было бага что после победы не мог ходить игрок 0
            oMove();
            printField();

        }


    }

}